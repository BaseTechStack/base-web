import{a as u,_ as p}from"./Card-dhBREXno.js";import{_ as c}from"./DocsLayout.vue_vue_type_script_setup_true_lang-D4FaFzot.js";import{d as g,c as m,w as s,a as x,b as y,e,f as r,g as o,i as f,r as b,o as i}from"./index-c5PrNzGP.js";const v={class:"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8"},h={class:"mb-12"},k={class:"mb-12"},w={class:"grid md:grid-cols-2 gap-6"},S={class:"mb-12"},C={class:"space-y-6"},P={class:"space-y-3"},E={class:"mb-12"},M={class:"grid md:grid-cols-2 gap-6"},D={class:"mt-6"},T={class:"mb-12"},_={class:"grid md:grid-cols-3 gap-6 mb-8"},R={class:"flex items-center gap-3"},B={class:"w-8 h-8 bg-blue-100 dark:bg-blue-900 text-blue-600 dark:text-blue-400 rounded flex items-center justify-center"},I={class:"flex items-center gap-3"},N={class:"w-8 h-8 bg-green-100 dark:bg-green-900 text-green-600 dark:text-green-400 rounded flex items-center justify-center"},U={class:"flex items-center gap-3"},A={class:"w-8 h-8 bg-purple-100 dark:bg-purple-900 text-purple-600 dark:text-purple-400 rounded flex items-center justify-center"},G={class:"space-y-4"},O={class:"flex items-center gap-4 text-sm"},q={class:"mb-12"},L={class:"space-y-6"},z={class:"flex items-center gap-3"},F={class:"w-6 h-6 bg-blue-100 dark:bg-blue-900 text-blue-600 dark:text-blue-400 rounded flex items-center justify-center"},j={class:"space-y-3"},J={class:"flex items-center gap-3"},H={class:"w-6 h-6 bg-green-100 dark:bg-green-900 text-green-600 dark:text-green-400 rounded flex items-center justify-center"},K={class:"space-y-3"},V={class:"flex items-center gap-3"},W={class:"w-6 h-6 bg-purple-100 dark:bg-purple-900 text-purple-600 dark:text-purple-400 rounded flex items-center justify-center"},$={class:"space-y-3"},Q={class:"mb-12"},X={class:"flex flex-col gap-6"},Y={class:"space-y-3"},Z={class:"space-y-3"},ee={class:"mb-12"},te={class:"space-y-6"},se={class:"space-y-3"},re={class:"grid grid-cols-1 gap-3"},ne={class:"flex items-center gap-3"},oe={class:"flex items-center gap-3"},le={class:"flex items-center gap-3"},ae={class:"flex items-center gap-3"},ie={class:"flex items-center gap-3"},de={class:"flex items-center gap-3"},ue={class:"mb-12"},pe={class:"grid md:grid-cols-2 gap-6"},ce={class:"mb-12"},ge={class:"space-y-6"},me={class:"flex items-center gap-3"},xe={class:"w-8 h-8 bg-green-100 dark:bg-green-900 text-green-600 dark:text-green-400 rounded flex items-center justify-center"},ye={class:"space-y-3"},fe={class:"flex items-center gap-3"},be={class:"w-8 h-8 bg-purple-100 dark:bg-purple-900 text-purple-600 dark:text-purple-400 rounded flex items-center justify-center"},ve={class:"space-y-3"},he={class:"flex items-center gap-3"},ke={class:"w-8 h-8 bg-blue-100 dark:bg-blue-900 text-blue-600 dark:text-blue-400 rounded flex items-center justify-center"},we={class:"space-y-3"},Se={class:"flex items-center gap-3"},Ce={class:"w-8 h-8 bg-orange-100 dark:bg-orange-900 text-orange-600 dark:text-orange-400 rounded flex items-center justify-center"},Pe={class:"space-y-3"},Re=g({__name:"application",setup(Ee){return(Me,t)=>{const a=u,n=p,l=f("Icon"),d=b("prism");return i(),m(c,null,{default:s(()=>[x((i(),y("div",v,[t[90]||(t[90]=e("div",{class:"mb-8"},[e("h1",{class:"text-4xl font-bold text-gray-900 dark:text-white mb-4"},"App Directory"),e("p",{class:"text-xl text-gray-600 dark:text-gray-300"}," Understanding Base Framework's application layer, module initialization, and business logic organization. ")],-1)),e("section",h,[t[0]||(t[0]=e("h2",{class:"text-3xl font-bold text-gray-900 dark:text-white mb-6"},"Overview",-1)),t[1]||(t[1]=e("p",{class:"text-gray-600 dark:text-gray-400 mb-4"},[o(" The "),e("code",{class:"bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded"},"app/"),o(" directory is the heart of your Base Framework application. It's where your business logic lives, modules are organized, and application-specific functionality is implemented. Unlike the "),e("code",{class:"bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded"},"core/"),o(" directory which contains framework infrastructure, the "),e("code",{class:"bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded"},"app/"),o(" directory is entirely yours to customize. ")],-1)),r(a,{icon:"i-heroicons-information-circle",color:"blue",variant:"soft",title:"Key Concept",description:"The app/ directory uses Base Framework's module system to organize business logic into self-contained, testable, and maintainable components."})]),e("section",k,[t[7]||(t[7]=e("h2",{class:"text-3xl font-bold text-gray-900 dark:text-white mb-6"},"Directory Structure",-1)),r(n,{class:"bg-gray-50 dark:bg-gray-800 mb-6"},{default:s(()=>t[2]||(t[2]=[e("pre",{class:"text-sm overflow-x-auto"},[e("code",null,`app/
├── init.go              # Module registration hub
├── models/              # Shared data models
│   ├── user.go
│   ├── post.go
│   └── category.go
└── [modules]/           # Generated by \`base g\`
    ├── post/
    │   ├── controller.go  # HTTP handlers
    │   ├── service.go     # Business logic
    │   └── module.go      # Module definition
    ├── user/
    │   ├── controller.go
    │   ├── service.go
    │   └── module.go
    └── category/
        ├── controller.go
        ├── service.go
        └── module.go`)],-1)])),_:1,__:[2]}),e("div",w,[r(n,null,{header:s(()=>t[3]||(t[3]=[e("h3",{class:"font-semibold text-blue-600 dark:text-blue-400"},"init.go",-1)])),default:s(()=>[t[4]||(t[4]=e("p",{class:"text-sm text-gray-600 dark:text-gray-400"}," Central module registry that tells the framework which modules to load and initialize. This is the entry point for all your business logic. ",-1))]),_:1,__:[4]}),r(n,null,{header:s(()=>t[5]||(t[5]=[e("h3",{class:"font-semibold text-green-600 dark:text-green-400"},"models/",-1)])),default:s(()=>[t[6]||(t[6]=e("p",{class:"text-sm text-gray-600 dark:text-gray-400"}," Shared data models (GORM structs) that can be used across multiple modules. Centralized to prevent circular dependencies. ",-1))]),_:1,__:[6]})])]),e("section",S,[t[17]||(t[17]=e("h2",{class:"text-3xl font-bold text-gray-900 dark:text-white mb-6"},"Module Initialization Flow",-1)),t[18]||(t[18]=e("p",{class:"text-gray-600 dark:text-gray-400 mb-6"}," Understanding how modules get initialized is crucial for building maintainable Base applications. Here's what happens under the hood: ",-1)),e("div",C,[r(n,null,{header:s(()=>t[8]||(t[8]=[e("div",{class:"flex items-center gap-3"},[e("div",{class:"w-8 h-8 bg-blue-100 dark:bg-blue-900 text-blue-600 dark:text-blue-400 rounded-full flex items-center justify-center text-sm font-bold"},"1"),e("h3",{class:"font-semibold"},"Application Startup")],-1)])),default:s(()=>[t[9]||(t[9]=e("div",{class:"space-y-3"},[e("p",{class:"text-sm text-gray-600 dark:text-gray-400"},[o(" When your Base application starts, "),e("code",{class:"bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded"},"main.go"),o(" creates the core application infrastructure: ")]),e("ul",{class:"text-sm text-gray-600 dark:text-gray-400 space-y-1 ml-4"},[e("li",null,"• Database connection (GORM)"),e("li",null,"• Router with middleware"),e("li",null,"• Logger, Emitter, Storage systems"),e("li",null,"• Email sender and configuration")])],-1))]),_:1,__:[9]}),r(n,null,{header:s(()=>t[10]||(t[10]=[e("div",{class:"flex items-center gap-3"},[e("div",{class:"w-8 h-8 bg-green-100 dark:bg-green-900 text-green-600 dark:text-green-400 rounded-full flex items-center justify-center text-sm font-bold"},"2"),e("h3",{class:"font-semibold"},"Core Modules First")],-1)])),default:s(()=>[t[11]||(t[11]=e("p",{class:"text-sm text-gray-600 dark:text-gray-400"}," The framework initializes core modules (authentication, permissions, etc.) before your app modules. This ensures all foundation services are available. ",-1))]),_:1,__:[11]}),r(n,null,{header:s(()=>t[12]||(t[12]=[e("div",{class:"flex items-center gap-3"},[e("div",{class:"w-8 h-8 bg-purple-100 dark:bg-purple-900 text-purple-600 dark:text-purple-400 rounded-full flex items-center justify-center text-sm font-bold"},"3"),e("h3",{class:"font-semibold"},"App Module Discovery")],-1)])),default:s(()=>[e("div",P,[t[14]||(t[14]=e("p",{class:"text-sm text-gray-600 dark:text-gray-400"},[o(" The framework calls "),e("code",{class:"bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded"},"app/init.go:GetAppModules()"),o(" to discover your business modules: ")],-1)),r(n,{class:"bg-gray-50 dark:bg-gray-800"},{default:s(()=>t[13]||(t[13]=[e("pre",{class:"text-xs overflow-x-auto"},[e("code",{class:"language-go"},`func (am *AppModules) GetAppModules(deps module.Dependencies) map[string]module.Module {
    modules := make(map[string]module.Module)
    
    // Add your modules here:
    modules["post"] = post.NewModule(deps)
    modules["user"] = user.NewModule(deps)
    
    return modules
}`)],-1)])),_:1,__:[13]})])]),_:1}),r(n,null,{header:s(()=>t[15]||(t[15]=[e("div",{class:"flex items-center gap-3"},[e("div",{class:"w-8 h-8 bg-red-100 dark:bg-red-900 text-red-600 dark:text-red-400 rounded-full flex items-center justify-center text-sm font-bold"},"4"),e("h3",{class:"font-semibold"},"Module Lifecycle")],-1)])),default:s(()=>[t[16]||(t[16]=e("div",{class:"space-y-3"},[e("p",{class:"text-sm text-gray-600 dark:text-gray-400"},"For each module, the framework executes the complete lifecycle:"),e("div",{class:"grid md:grid-cols-2 gap-4"},[e("div",null,[e("h4",{class:"font-medium text-sm mb-2"},"Registration"),e("p",{class:"text-xs text-gray-500 dark:text-gray-400"},"Module is registered in the global registry")]),e("div",null,[e("h4",{class:"font-medium text-sm mb-2"},"Initialization"),e("p",{class:"text-xs text-gray-500 dark:text-gray-400"},[o("Module's "),e("code",null,"Init()"),o(" method is called")])]),e("div",null,[e("h4",{class:"font-medium text-sm mb-2"},"Migration"),e("p",{class:"text-xs text-gray-500 dark:text-gray-400"},[o("Database migrations run via "),e("code",null,"Migrate()")])]),e("div",null,[e("h4",{class:"font-medium text-sm mb-2"},"Route Setup"),e("p",{class:"text-xs text-gray-500 dark:text-gray-400"},[o("HTTP routes are registered via "),e("code",null,"Routes()")])])])],-1))]),_:1,__:[16]})])]),e("section",E,[t[25]||(t[25]=e("h2",{class:"text-3xl font-bold text-gray-900 dark:text-white mb-6"},"Dependency Injection",-1)),t[26]||(t[26]=e("p",{class:"text-gray-600 dark:text-gray-400 mb-6"},[o(" Base Framework uses dependency injection to provide your modules with access to framework services. Every module receives a "),e("code",{class:"bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded"},"Dependencies"),o(" struct containing: ")],-1)),e("div",M,[r(n,null,{header:s(()=>t[19]||(t[19]=[e("h3",{class:"font-semibold"},"Core Dependencies",-1)])),default:s(()=>[t[20]||(t[20]=e("ul",{class:"text-sm space-y-2"},[e("li",null,[e("code",{class:"bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded text-xs"},"DB"),o(" - GORM database instance")]),e("li",null,[e("code",{class:"bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded text-xs"},"Router"),o(" - HTTP router for defining endpoints")]),e("li",null,[e("code",{class:"bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded text-xs"},"Logger"),o(" - Structured logging service")]),e("li",null,[e("code",{class:"bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded text-xs"},"Config"),o(" - Application configuration")])],-1))]),_:1,__:[20]}),r(n,null,{header:s(()=>t[21]||(t[21]=[e("h3",{class:"font-semibold"},"Extended Services",-1)])),default:s(()=>[t[22]||(t[22]=e("ul",{class:"text-sm space-y-2"},[e("li",null,[e("code",{class:"bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded text-xs"},"Emitter"),o(" - Event system for module communication")]),e("li",null,[e("code",{class:"bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded text-xs"},"Storage"),o(" - File upload and management")]),e("li",null,[e("code",{class:"bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded text-xs"},"EmailSender"),o(" - Email service integration")])],-1))]),_:1,__:[22]})]),e("div",D,[t[24]||(t[24]=e("h3",{class:"text-xl font-semibold text-gray-900 dark:text-white mb-3"},"Usage Example",-1)),r(n,{class:"bg-gray-50 dark:bg-gray-800"},{default:s(()=>t[23]||(t[23]=[e("pre",{class:"text-sm overflow-x-auto"},[e("code",{class:"language-go"},`// In your module's service
func (s *PostService) CreatePost(data CreatePostRequest) (*models.Post, error) {
    // Use injected database
    post := &models.Post{
        Title:   data.Title,
        Content: data.Content,
        UserID:  data.UserID,
    }
    
    if err := s.deps.DB.Create(post).Error; err != nil {
        s.deps.Logger.Error("Failed to create post", logger.String("error", err.Error()))
        return nil, err
    }
    
    // Emit event for other modules to react
    s.deps.Emitter.Emit("post.created", post)
    
    return post, nil
}`)],-1)])),_:1,__:[23]})])]),e("section",T,[t[38]||(t[38]=e("h2",{class:"text-3xl font-bold text-gray-900 dark:text-white mb-6"},"MCS Architecture Pattern",-1)),t[39]||(t[39]=e("p",{class:"text-gray-600 dark:text-gray-400 mb-6"}," Base Framework implements the Model-Controller-Service (MCS) architecture pattern to ensure clean separation of concerns, maintainability, and testability. Each layer has distinct responsibilities and clear boundaries. ",-1)),r(a,{icon:"i-heroicons-information-circle",color:"blue",variant:"soft",title:"Architecture Benefits",description:"The MCS pattern promotes loose coupling, high cohesion, and makes your code easier to test, maintain, and scale.",class:"mb-6"}),e("div",_,[r(n,null,{header:s(()=>[e("div",R,[e("div",B,[r(l,{name:"i-lucide-database",class:"w-5 h-5"})]),t[27]||(t[27]=e("h3",{class:"font-semibold text-blue-600 dark:text-blue-400"},"Model",-1))])]),default:s(()=>[t[28]||(t[28]=e("div",{class:"space-y-3"},[e("p",{class:"text-sm text-gray-600 dark:text-gray-400"},[e("strong",null,"Data Layer:"),o(" Defines data structures, validation rules, and data relationships. ")]),e("ul",{class:"text-xs text-gray-500 dark:text-gray-500 space-y-1"},[e("li",null,"• GORM struct definitions"),e("li",null,"• Request/Response types"),e("li",null,"• Data validation tags"),e("li",null,"• Database relationships"),e("li",null,"• Serialization methods")]),e("p",{class:"text-xs text-gray-500 dark:text-gray-500 italic"},[o(" Located in: "),e("code",null,"app/models/")])],-1))]),_:1,__:[28]}),r(n,null,{header:s(()=>[e("div",I,[e("div",N,[r(l,{name:"i-lucide-globe",class:"w-5 h-5"})]),t[29]||(t[29]=e("h3",{class:"font-semibold text-green-600 dark:text-green-400"},"Controller",-1))])]),default:s(()=>[t[30]||(t[30]=e("div",{class:"space-y-3"},[e("p",{class:"text-sm text-gray-600 dark:text-gray-400"},[e("strong",null,"HTTP Layer:"),o(" Handles web requests, responses, and HTTP-specific concerns. ")]),e("ul",{class:"text-xs text-gray-500 dark:text-gray-500 space-y-1"},[e("li",null,"• Route definitions"),e("li",null,"• Request parsing"),e("li",null,"• Response formatting"),e("li",null,"• HTTP status codes"),e("li",null,"• Input validation")]),e("p",{class:"text-xs text-gray-500 dark:text-gray-500 italic"},[o(" Located in: "),e("code",null,"app/[module]/controller.go")])],-1))]),_:1,__:[30]}),r(n,null,{header:s(()=>[e("div",U,[e("div",A,[r(l,{name:"i-lucide-cog",class:"w-5 h-5"})]),t[31]||(t[31]=e("h3",{class:"font-semibold text-purple-600 dark:text-purple-400"},"Service",-1))])]),default:s(()=>[t[32]||(t[32]=e("div",{class:"space-y-3"},[e("p",{class:"text-sm text-gray-600 dark:text-gray-400"},[e("strong",null,"Business Layer:"),o(" Contains business logic, data access, and external integrations. ")]),e("ul",{class:"text-xs text-gray-500 dark:text-gray-500 space-y-1"},[e("li",null,"• Business rules & validation"),e("li",null,"• Database operations"),e("li",null,"• External API calls"),e("li",null,"• Event emission"),e("li",null,"• Inter-service communication")]),e("p",{class:"text-xs text-gray-500 dark:text-gray-500 italic"},[o(" Located in: "),e("code",null,"app/[module]/service.go")])],-1))]),_:1,__:[32]})]),r(n,{class:"mb-6"},{header:s(()=>t[33]||(t[33]=[e("h3",{class:"font-semibold"},"Data Flow & Responsibilities",-1)])),default:s(()=>[e("div",G,[e("div",O,[t[34]||(t[34]=e("div",{class:"flex items-center gap-2"},[e("div",{class:"w-3 h-3 bg-blue-500 rounded"}),e("span",{class:"font-medium"},"HTTP Request")],-1)),r(l,{name:"i-lucide-arrow-right",class:"w-4 h-4 text-gray-400"}),t[35]||(t[35]=e("div",{class:"flex items-center gap-2"},[e("div",{class:"w-3 h-3 bg-green-500 rounded"}),e("span",{class:"font-medium"},"Controller")],-1)),r(l,{name:"i-lucide-arrow-right",class:"w-4 h-4 text-gray-400"}),t[36]||(t[36]=e("div",{class:"flex items-center gap-2"},[e("div",{class:"w-3 h-3 bg-purple-500 rounded"}),e("span",{class:"font-medium"},"Service")],-1)),r(l,{name:"i-lucide-arrow-right",class:"w-4 h-4 text-gray-400"}),t[37]||(t[37]=e("div",{class:"flex items-center gap-2"},[e("div",{class:"w-3 h-3 bg-blue-500 rounded"}),e("span",{class:"font-medium"},"Model/Database")],-1))]),r(a,{icon:"i-heroicons-exclamation-triangle",color:"yellow",variant:"soft",title:"Important Rules",description:"1) Controllers should NEVER directly access the database or external APIs. 2) Permission checks should be handled by authorization middleware, NOT in the service layer. Services focus on business logic only."})])]),_:1})]),e("section",q,[t[49]||(t[49]=e("h2",{class:"text-3xl font-bold text-gray-900 dark:text-white mb-6"},"Implementation Examples",-1)),t[50]||(t[50]=e("p",{class:"text-gray-600 dark:text-gray-400 mb-6"}," Here's how the MCS pattern is implemented in practice with real code examples from generated modules. ",-1)),e("div",L,[r(n,null,{header:s(()=>[e("div",z,[e("div",F,[r(l,{name:"i-lucide-globe",class:"w-4 h-4"})]),t[40]||(t[40]=e("h3",{class:"font-semibold"},"Controller Layer (HTTP)",-1))])]),default:s(()=>[e("div",j,[t[42]||(t[42]=e("p",{class:"text-sm text-gray-600 dark:text-gray-400"}," Handles HTTP requests, validation, response formatting, and route definitions. Controllers are thin and delegate business logic to services. ",-1)),r(n,{class:"bg-gray-50 dark:bg-gray-800"},{default:s(()=>t[41]||(t[41]=[e("pre",{class:"text-xs overflow-x-auto"},[e("code",{class:"language-go"},`func (c *PostController) CreatePost(ctx *router.Context) error {
    var req CreatePostRequest
    if err := ctx.ShouldBindJSON(&req); err != nil {
        return ctx.JSON(400, map[string]any{"error": err.Error()})
    }
    
    post, err := c.service.CreatePost(req)
    if err != nil {
        return ctx.JSON(500, map[string]any{"error": err.Error()})
    }
    
    return ctx.JSON(201, post)
}

func (c *PostController) Routes(router *router.RouterGroup) {
    // Import authorization middleware
    // import "base/core/app/authorization"
    
    // Main CRUD endpoints with authorization middleware
    router.GET("/posts", c.List)                                               // Public read
    router.POST("/posts", authorization.Can("create", "post"), c.Create)       // Requires create permission
    router.GET("/posts/all", c.ListAll)                                        // Public read
    router.GET("/posts/:id", c.Get)                                            // Public read
    router.PUT("/posts/:id", authorization.CanAccess("update", "post", "id"), c.Update)    // Requires resource permission
    router.DELETE("/posts/:id", authorization.CanAccess("delete", "post", "id"), c.Delete) // Requires resource permission
}`)],-1)])),_:1,__:[41]})])]),_:1}),r(n,null,{header:s(()=>[e("div",J,[e("div",H,[r(l,{name:"i-lucide-cog",class:"w-4 h-4"})]),t[43]||(t[43]=e("h3",{class:"font-semibold"},"Service Layer (Business Logic)",-1))])]),default:s(()=>[e("div",K,[t[45]||(t[45]=e("p",{class:"text-sm text-gray-600 dark:text-gray-400"}," Contains the core business logic, data validation, and business rules. Services can call other services and emit events. ",-1)),r(n,{class:"bg-gray-50 dark:bg-gray-800"},{default:s(()=>t[44]||(t[44]=[e("pre",{class:"text-xs overflow-x-auto"},[e("code",{class:"language-go"},`func (s *PostService) CreatePost(data CreatePostRequest) (*models.Post, error) {
    // Business validation only - permissions handled by middleware
    if len(data.Title) < 3 {
        return nil, errors.New("title must be at least 3 characters")
    }
    
    // Business rules
    if data.Content == "" {
        return nil, errors.New("content cannot be empty")
    }
    
    // Database operation
    post := &models.Post{
        Title:     data.Title, 
        Content:   data.Content,
        Published: data.Published,
        UserId:    data.UserID,
    }
    if err := s.deps.DB.Create(post).Error; err != nil {
        return nil, err
    }
    
    // Emit business event
    s.deps.Emitter.Emit("post.created", post)
    return post, nil
}`)],-1)])),_:1,__:[44]})])]),_:1}),r(n,null,{header:s(()=>[e("div",V,[e("div",W,[r(l,{name:"i-lucide-package",class:"w-4 h-4"})]),t[46]||(t[46]=e("h3",{class:"font-semibold"},"Module Definition",-1))])]),default:s(()=>[e("div",$,[t[48]||(t[48]=e("p",{class:"text-sm text-gray-600 dark:text-gray-400"}," Ties everything together - handles initialization, database migrations, and connects controllers to the router. ",-1)),r(n,{class:"bg-gray-50 dark:bg-gray-800"},{default:s(()=>t[47]||(t[47]=[e("pre",{class:"text-xs overflow-x-auto"},[e("code",{class:"language-go"},`type Module struct {
    service    *Service
    controller *Controller
    deps       module.Dependencies
}

func (m *Module) Init() error {
    // Module initialization logic
    return nil
}

func (m *Module) Migrate() error {
    // Auto-migrate models
    return m.deps.DB.AutoMigrate(&models.Post{})
}

func (m *Module) Routes(router *router.RouterGroup) {
    // Delegate route registration to the controller
    m.Controller.Routes(router)
}`)],-1)])),_:1,__:[47]})])]),_:1})])]),e("section",Q,[t[57]||(t[57]=e("h2",{class:"text-3xl font-bold text-gray-900 dark:text-white mb-6"},"Module Communication",-1)),t[58]||(t[58]=e("p",{class:"text-gray-600 dark:text-gray-400 mb-6"}," Modules in Base Framework communicate through events and direct service injection, maintaining loose coupling while enabling powerful integrations. ",-1)),e("div",X,[r(n,null,{header:s(()=>t[51]||(t[51]=[e("h3",{class:"font-semibold text-blue-600 dark:text-blue-400"},"Event-Driven Communication",-1)])),default:s(()=>[e("div",Y,[t[53]||(t[53]=e("p",{class:"text-sm text-gray-600 dark:text-gray-400"}," Asynchronous, decoupled communication using the built-in event emitter: ",-1)),r(n,{class:"bg-gray-50 dark:bg-gray-800"},{default:s(()=>t[52]||(t[52]=[e("pre",{class:"text-xs"},[e("code",{class:"language-go"},`// Emit events
emitter.Emit("user.created", user)
emitter.Emit("post.published", post)

// Listen for events
emitter.On("user.created", handleUserCreated)
emitter.On("post.published", handlePostPublished)`)],-1)])),_:1,__:[52]})])]),_:1}),r(n,null,{header:s(()=>t[54]||(t[54]=[e("h3",{class:"font-semibold text-green-600 dark:text-green-400"},"Direct Service Injection",-1)])),default:s(()=>[e("div",Z,[t[56]||(t[56]=e("p",{class:"text-sm text-gray-600 dark:text-gray-400"}," Synchronous communication by injecting services directly: ",-1)),r(n,{class:"bg-gray-50 dark:bg-gray-800"},{default:s(()=>t[55]||(t[55]=[e("pre",{class:"text-xs"},[e("code",{class:"language-go"},`type PostService struct {
    userService *user.Service
    deps        module.Dependencies
}

func (s *PostService) CreatePost(data PostData) error {
    // Use injected user service
    user, err := s.userService.GetUser(data.UserID)
    if err != nil {
        return err
    }
    // ... rest of logic
}`)],-1)])),_:1,__:[55]})])]),_:1})])]),e("section",ee,[t[69]||(t[69]=e("h2",{class:"text-3xl font-bold text-gray-900 dark:text-white mb-6"},"CLI Integration",-1)),t[70]||(t[70]=e("p",{class:"text-gray-600 dark:text-gray-400 mb-6"}," The Base CLI integrates seamlessly with the app directory structure, generating modules that follow the established patterns. ",-1)),e("div",te,[r(n,null,{header:s(()=>t[59]||(t[59]=[e("h3",{class:"font-semibold"},"Generating Modules",-1)])),default:s(()=>[e("div",se,[r(n,{class:"bg-gray-50 dark:bg-gray-800"},{default:s(()=>t[60]||(t[60]=[e("pre",{class:"text-sm"},[e("code",{class:"language-bash"},`# Generate a complete module with CRUD operations
base g post title:string content:text published:bool

# Generate with relationships (auto-detected from _id suffix)
base g comment post_id:uint content:text user_id:uint

# Generate with file uploads
base g profile user_id:uint avatar:image bio:text`)],-1)])),_:1,__:[60]}),t[61]||(t[61]=e("p",{class:"text-sm text-gray-600 dark:text-gray-400"},[o(" This automatically creates the module directory, controller, service, model, and updates "),e("code",null,"app/init.go"),o(" to register the new module. ")],-1))])]),_:1}),r(n,null,{header:s(()=>t[62]||(t[62]=[e("h3",{class:"font-semibold"},"What Gets Generated",-1)])),default:s(()=>[e("div",re,[e("div",ne,[r(l,{name:"i-lucide-file-text",class:"w-4 h-4 text-blue-500"}),t[63]||(t[63]=e("span",{class:"text-sm"},[e("code",null,"app/models/post.go"),o(" - GORM model with relationships")],-1))]),e("div",oe,[r(l,{name:"i-lucide-folder",class:"w-4 h-4 text-green-500"}),t[64]||(t[64]=e("span",{class:"text-sm"},[e("code",null,"app/post/"),o(" - Module directory")],-1))]),e("div",le,[r(l,{name:"i-lucide-globe",class:"w-4 h-4 text-purple-500"}),t[65]||(t[65]=e("span",{class:"text-sm"},[e("code",null,"app/post/controller.go"),o(" - HTTP handlers")],-1))]),e("div",ae,[r(l,{name:"i-lucide-cog",class:"w-4 h-4 text-orange-500"}),t[66]||(t[66]=e("span",{class:"text-sm"},[e("code",null,"app/post/service.go"),o(" - Business logic")],-1))]),e("div",ie,[r(l,{name:"i-lucide-package",class:"w-4 h-4 text-red-500"}),t[67]||(t[67]=e("span",{class:"text-sm"},[e("code",null,"app/post/module.go"),o(" - Module definition")],-1))]),e("div",de,[r(l,{name:"i-lucide-settings",class:"w-4 h-4 text-gray-500"}),t[68]||(t[68]=e("span",{class:"text-sm"},[e("code",null,"app/init.go"),o(" - Updated with new module registration")],-1))])])]),_:1})])]),e("section",ue,[t[75]||(t[75]=e("h2",{class:"text-3xl font-bold text-gray-900 dark:text-white mb-6"},"Best Practices",-1)),e("div",pe,[r(n,null,{header:s(()=>t[71]||(t[71]=[e("h3",{class:"font-semibold text-green-600 dark:text-green-400"},"✅ Do",-1)])),default:s(()=>[t[72]||(t[72]=e("ul",{class:"text-sm space-y-2"},[e("li",null,"• Keep controllers thin - delegate to services"),e("li",null,"• Use events for cross-module communication"),e("li",null,[o("• Place shared models in "),e("code",null,"app/models/")]),e("li",null,"• Follow the generated module structure"),e("li",null,"• Use dependency injection for testability"),e("li",null,"• Emit events for important business actions")],-1))]),_:1,__:[72]}),r(n,null,{header:s(()=>t[73]||(t[73]=[e("h3",{class:"font-semibold text-red-600 dark:text-red-400"},"❌ Don't",-1)])),default:s(()=>[t[74]||(t[74]=e("ul",{class:"text-sm space-y-2"},[e("li",null,"• Put business logic in controllers"),e("li",null,"• Create circular dependencies between modules"),e("li",null,"• Access database directly from controllers"),e("li",null,"• Hardcode configuration values"),e("li",null,"• Skip error handling and logging"),e("li",null,"• Ignore the module lifecycle methods")],-1))]),_:1,__:[74]})])]),e("section",ce,[t[88]||(t[88]=e("h2",{class:"text-3xl font-bold text-gray-900 dark:text-white mb-6"},"Example: Complete Module Implementation",-1)),t[89]||(t[89]=e("p",{class:"text-gray-600 dark:text-gray-400 mb-6"}," Here's how a complete module looks when following Base Framework patterns: ",-1)),e("div",ge,[r(n,null,{header:s(()=>[e("div",me,[e("div",xe,[r(l,{name:"i-lucide-globe",class:"w-5 h-5"})]),t[76]||(t[76]=e("h3",{class:"font-semibold"},"Controller (HTTP Layer)",-1))])]),default:s(()=>[e("div",ye,[t[78]||(t[78]=e("p",{class:"text-sm text-gray-600 dark:text-gray-400"}," Handles HTTP requests, validation, and delegates to service layer: ",-1)),r(n,{class:"bg-gray-50 dark:bg-gray-800"},{default:s(()=>t[77]||(t[77]=[e("pre",{class:"text-xs overflow-x-auto"},[e("code",{class:"language-go"},`// app/post/controller.go
package post

import (
    "base/core/router"
    "net/http"
    "strconv"
)

type Controller struct {
    service *Service
}

func NewController(service *Service) *Controller {
    return &Controller{service: service}
}

func (c *Controller) Create(ctx *router.Context) error {
    var req models.CreatePostRequest
    if err := ctx.ShouldBindJSON(&req); err != nil {
        return ctx.JSON(http.StatusBadRequest, map[string]any{
            "error": err.Error(),
        })
    }

    post, err := c.service.Create(&req)
    if err != nil {
        return ctx.JSON(http.StatusInternalServerError, map[string]any{
            "error": err.Error(),
        })
    }

    return ctx.JSON(http.StatusCreated, post.ToResponse())
}

func (c *Controller) List(ctx *router.Context) error {
    posts, err := c.service.GetAll(nil, nil, nil, nil)
    if err != nil {
        return ctx.JSON(http.StatusInternalServerError, map[string]any{
            "error": err.Error(),
        })
    }

    return ctx.JSON(http.StatusOK, posts)
}

func (c *Controller) Get(ctx *router.Context) error {
    id, err := strconv.ParseUint(ctx.Param("id"), 10, 32)
    if err != nil {
        return ctx.JSON(http.StatusBadRequest, map[string]any{
            "error": "Invalid ID format",
        })
    }

    post, err := c.service.GetById(uint(id))
    if err != nil {
        return ctx.JSON(http.StatusNotFound, map[string]any{
            "error": "Post not found",
        })
    }

    return ctx.JSON(http.StatusOK, post.ToResponse())
}

func (c *Controller) ListAll(ctx *router.Context) error {
    posts, err := c.service.GetAllForSelect()
    if err != nil {
        return ctx.JSON(http.StatusInternalServerError, map[string]any{
            "error": err.Error(),
        })
    }
    return ctx.JSON(http.StatusOK, posts)
}

func (c *Controller) Update(ctx *router.Context) error {
    id, err := strconv.ParseUint(ctx.Param("id"), 10, 32)
    if err != nil {
        return ctx.JSON(http.StatusBadRequest, map[string]any{
            "error": "Invalid ID format",
        })
    }

    var req models.UpdatePostRequest
    if err := ctx.ShouldBindJSON(&req); err != nil {
        return ctx.JSON(http.StatusBadRequest, map[string]any{
            "error": err.Error(),
        })
    }

    post, err := c.service.Update(uint(id), &req)
    if err != nil {
        return ctx.JSON(http.StatusInternalServerError, map[string]any{
            "error": err.Error(),
        })
    }

    return ctx.JSON(http.StatusOK, post.ToResponse())
}

func (c *Controller) Delete(ctx *router.Context) error {
    id, err := strconv.ParseUint(ctx.Param("id"), 10, 32)
    if err != nil {
        return ctx.JSON(http.StatusBadRequest, map[string]any{
            "error": "Invalid ID format",
        })
    }

    if err := c.service.Delete(uint(id)); err != nil {
        return ctx.JSON(http.StatusInternalServerError, map[string]any{
            "error": err.Error(),
        })
    }

    return ctx.NoContent()
}

// Routes defines all the HTTP routes for this controller
func (c *Controller) Routes(router *router.RouterGroup) {
    // Main CRUD endpoints - specific routes MUST come before parameterized routes
    router.GET("/posts", c.List)          // Paginated list
    router.POST("/posts", c.Create)       // Create
    router.GET("/posts/all", c.ListAll)   // Unpaginated list - MUST be before /:id
    router.GET("/posts/:id", c.Get)       // Get by ID - MUST be after /all
    router.PUT("/posts/:id", c.Update)    // Update
    router.DELETE("/posts/:id", c.Delete) // Delete
}`)],-1)])),_:1,__:[77]})])]),_:1}),r(n,null,{header:s(()=>[e("div",fe,[e("div",be,[r(l,{name:"i-lucide-cog",class:"w-5 h-5"})]),t[79]||(t[79]=e("h3",{class:"font-semibold"},"Service (Business Layer)",-1))])]),default:s(()=>[e("div",ve,[t[81]||(t[81]=e("p",{class:"text-sm text-gray-600 dark:text-gray-400"}," Contains business logic, data access, and event emission: ",-1)),r(n,{class:"bg-gray-50 dark:bg-gray-800"},{default:s(()=>t[80]||(t[80]=[e("pre",{class:"text-xs overflow-x-auto"},[e("code",{class:"language-go"},`// app/post/service.go
package post

import (
    "base/app/models"
    "base/core/module"
    "base/core/logger"
    "base/core/types"
    "errors"
)

type Service struct {
    deps module.Dependencies
}

func NewService(deps module.Dependencies) *Service {
    return &Service{deps: deps}
}

func (s *Service) Create(data *models.CreatePostRequest) (*models.Post, error) {
    // Business validation
    if len(data.Title) < 3 {
        return nil, errors.New("title must be at least 3 characters")
    }

    // Create post
    post := &models.Post{
        Title:     data.Title,
        Content:   data.Content,
        Published: data.Published,
        UserId:    data.UserID,
    }

    if err := s.deps.DB.Create(post).Error; err != nil {
        s.deps.Logger.Error("Failed to create post", 
            logger.String("error", err.Error()))
        return nil, err
    }

    // Emit business event
    s.deps.Emitter.Emit("post.created", post)

    s.deps.Logger.Info("Post created successfully", 
        logger.Uint("post_id", post.Id))

    return post, nil
}

func (s *Service) GetAll(page, limit *int, sortBy, sortOrder *string) (*types.PaginatedResponse, error) {
    var posts []models.Post
    query := s.deps.DB.Model(&models.Post{})
    
    // Apply pagination and sorting logic here
    if err := query.Find(&posts).Error; err != nil {
        return nil, err
    }
    
    return &types.PaginatedResponse{
        Data:  posts,
        Total: int64(len(posts)),
        Page:  1,
        Limit: len(posts),
    }, nil
}

func (s *Service) GetById(id uint) (*models.Post, error) {
    var post models.Post
    if err := s.deps.DB.First(&post, id).Error; err != nil {
        return nil, err
    }
    return &post, nil
}

func (s *Service) GetAllForSelect() ([]*models.Post, error) {
    var posts []*models.Post
    if err := s.deps.DB.Select("id, title").Find(&posts).Error; err != nil {
        return nil, err
    }
    return posts, nil
}

func (s *Service) Update(id uint, data *models.UpdatePostRequest) (*models.Post, error) {
    var post models.Post
    if err := s.deps.DB.First(&post, id).Error; err != nil {
        return nil, err
    }

    // Update fields
    if data.Title != "" {
        post.Title = data.Title
    }
    if data.Content != "" {
        post.Content = data.Content
    }
    if data.Published != nil {
        post.Published = *data.Published
    }

    if err := s.deps.DB.Save(&post).Error; err != nil {
        return nil, err
    }

    // Emit update event
    s.deps.Emitter.Emit("post.updated", post)
    
    return &post, nil
}

func (s *Service) Delete(id uint) error {
    var post models.Post
    if err := s.deps.DB.First(&post, id).Error; err != nil {
        return err
    }

    if err := s.deps.DB.Delete(&post).Error; err != nil {
        return err
    }

    // Emit delete event
    s.deps.Emitter.Emit("post.deleted", map[string]any{
        "post_id": id,
        "title": post.Title,
    })

    return nil
}`)],-1)])),_:1,__:[80]})])]),_:1}),r(n,null,{header:s(()=>[e("div",he,[e("div",ke,[r(l,{name:"i-lucide-package",class:"w-5 h-5"})]),t[82]||(t[82]=e("h3",{class:"font-semibold"},"Module (Registration & Wiring)",-1))])]),default:s(()=>[e("div",we,[t[84]||(t[84]=e("p",{class:"text-sm text-gray-600 dark:text-gray-400"}," Ties everything together with dependency injection and route registration: ",-1)),r(n,{class:"bg-gray-50 dark:bg-gray-800"},{default:s(()=>t[83]||(t[83]=[e("pre",{class:"text-xs overflow-x-auto"},[e("code",{class:"language-go"},`// app/posts/module.go
package posts

import (
    "base/app/models"
    "base/core/module"
    "base/core/router"
    "gorm.io/gorm"
)

type Module struct {
    module.DefaultModule
    DB         *gorm.DB
    Service    *Service
    Controller *Controller
}

// Init creates and initializes the Post module with all dependencies
func Init(deps module.Dependencies) module.Module {
    // Initialize service and controller
    service := NewService(deps)
    controller := NewController(service)

    // Create module
    mod := &Module{
        DB:         deps.DB,
        Service:    service,
        Controller: controller,
    }

    return mod
}

// Routes registers the module routes
func (m *Module) Routes(router *router.RouterGroup) {
    m.Controller.Routes(router)
}

func (m *Module) Init() error {
    return nil
}

func (m *Module) Migrate() error {
    return m.DB.AutoMigrate(&models.Post{})
}

func (m *Module) GetModels() []any {
    return []any{
        &models.Post{},
    }
}`)],-1)])),_:1,__:[83]})])]),_:1}),r(n,null,{header:s(()=>[e("div",Se,[e("div",Ce,[r(l,{name:"i-lucide-settings",class:"w-5 h-5"})]),t[85]||(t[85]=e("h3",{class:"font-semibold"},"Registration (App Init)",-1))])]),default:s(()=>[e("div",Pe,[t[87]||(t[87]=e("p",{class:"text-sm text-gray-600 dark:text-gray-400"}," How the module gets registered in the application startup: ",-1)),r(n,{class:"bg-gray-50 dark:bg-gray-800"},{default:s(()=>t[86]||(t[86]=[e("pre",{class:"text-xs overflow-x-auto"},[e("code",{class:"language-go"},`// app/init.go
package app

import (
    "base/app/posts"
    "base/core/module"
)

// AppModules implements module.AppModuleProvider interface
type AppModules struct{}

// GetAppModules returns the list of app modules to initialize
// This is the only function that needs to be updated when adding new app modules
func (am *AppModules) GetAppModules(deps module.Dependencies) map[string]module.Module {
    modules := make(map[string]module.Module)

    // Posts module
    modules["posts"] = posts.Init(deps)
    
    return modules
}

// NewAppModules creates a new AppModules provider
func NewAppModules() *AppModules {
    return &AppModules{}
}`)],-1)])),_:1,__:[86]})])]),_:1})])]),e("section",null,[r(a,{icon:"i-heroicons-information-circle",color:"blue",variant:"soft",title:"Next Steps",description:"Now that you understand the app directory structure, explore other Base Framework features like Storage, Authentication, and Events to build comprehensive applications."})])])),[[d]])]),_:1})}}});export{Re as default};
